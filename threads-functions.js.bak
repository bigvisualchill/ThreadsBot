// ===== THREADS FUNCTIONS =====
// Extracted to prevent cross-platform corruption

// Import shared utilities that Threads functions depend on
import { sleep, tryClickByText } from './bot.js';

async function ensureThreadsLoggedIn(page, { username, password }) {
  console.log('🧵 === THREADS LOGIN START ===');
  console.log('🧵 Function called with username:', !!username, 'password:', !!password);
  
  try {
    console.log('🧵 Step 1: About to navigate to threads.net...');
    
    // Add timeout to navigation to prevent hanging
    const navigationPromise = page.goto('https://www.threads.net/', { 
      waitUntil: 'networkidle2',
      timeout: 30000 // 30 second timeout
    });
    
    console.log('🧵 Navigation promise created, waiting...');
    try {
      await navigationPromise;
      console.log('🧵 Step 1 COMPLETE: Navigation finished successfully');
    } catch (navError) {
      console.log('🧵 ❌ Navigation failed:', navError.message);
      console.log('🧵 Current URL after nav failure:', page.url());
      // Continue anyway to see what we can do
    }
    
    await sleep(2000);
    console.log('🧵 Step 2: Current URL after navigation:', page.url());

    // 2) If already logged in, bail early
    console.log('🧵 Step 3: About to check login status...');
    const already = await page.evaluate(() => {
      console.log('🧵 Step 3a: Inside page.evaluate - checking login status...');
      console.log('🧵 Current URL:', window.location.href);
      console.log('🧵 Page title:', document.title);
      console.log('🧵 Document ready state:', document.readyState);
      
      // Check for actual navigation elements that indicate we're logged in
      const navSelectors = ['[aria-label="Home"]','[aria-label="Search"]','[aria-label="Activity"]','[aria-label="Profile"]'];
      let foundNav = false;
      for (const sel of navSelectors) {
        const element = document.querySelector(sel);
        if (element) {
          console.log('🧵 Found nav element:', sel);
          foundNav = true;
          break;
        }
      }
      
      // Also check for login/signup buttons (indicates NOT logged in)
      const loginButtons = document.querySelectorAll('button, a');
      let hasLoginButtons = false;
      for (const button of loginButtons) {
        const text = button.textContent?.toLowerCase() || '';
        if (text.includes('log in') || text.includes('sign up')) {
          console.log('🧵 Found login button:', text.trim());
          hasLoginButtons = true;
          break;
        }
      }
      
      const loggedIn = foundNav && !hasLoginButtons;
      console.log('🧵 Has nav elements:', foundNav);
      console.log('🧵 Has login buttons:', hasLoginButtons);
      console.log('🧵 Final determination - already logged in:', loggedIn);
      
      return loggedIn;
    });
    if (already) {
      console.log('✅ Already logged into Threads');
      return true;
    }
    
    console.log('🔐 Not logged in - proceeding with login flow');

    if (!username || !password) {
      console.log('❌ Missing credentials:');
      console.log('   Username provided:', !!username);
      console.log('   Password provided:', !!password);
      throw new Error('Threads session missing and no credentials provided. Provide username/password or login headfully and save a session.');
    }
    
    console.log('✅ Credentials available, proceeding with direct username login...');

    // 3) Skip Instagram SSO and go directly to username login
    console.log('🔐 Skipping Instagram SSO, going directly to username login...');

    // Test 1: Simple URL change test - just click and see if URL changes
    console.log('🔐 === TEST 1: Simple URL Change Test ===');
    const testUrl = page.url();
    console.log('🔐 Starting URL:', testUrl);

    const testClicked = await tryClickByText(page, ['Log in with username instead']);
    if (testClicked) {
      await sleep(3000);
      const newTestUrl = page.url();
      console.log('🔐 After click URL:', newTestUrl);
      if (newTestUrl !== testUrl) {
        console.log('🔐 ✅ URL changed - button click worked!');
      } else {
        console.log('🔐 ❌ URL did not change - button click failed or page needs more time');
        // Try waiting longer
        await sleep(5000);
        const longerWaitUrl = page.url();
        console.log('🔐 After 8s total wait URL:', longerWaitUrl);
        if (longerWaitUrl !== testUrl) {
          console.log('🔐 ✅ URL changed after longer wait!');
        } else {
          console.log('🔐 ❌ URL still not changed - button may not be working');
        }
      }
    } else {
      console.log('🔐 ❌ Could not find "Log in with username instead" button');
    }

    // Wait for page to fully load and stabilize
    await sleep(5000);

    // Take a screenshot for debugging
    try {
      await page.screenshot({ path: 'debug-login-start.png', fullPage: true });
      console.log('🔐 📸 Screenshot taken: debug-login-start.png');
    } catch (screenshotError) {
      console.log('🔐 Screenshot failed:', screenshotError.message);
    }
    
    // First, let's see what buttons are available
    const availableButtons = await page.evaluate(() => {
      const buttons = document.querySelectorAll('button, a, div[role="button"], span[role="button"]');
      const buttonInfo = [];
      for (const btn of buttons) {
        const text = (btn.textContent || '').trim();
        const visible = btn.offsetParent !== null;
        const clickable = !btn.disabled && btn.offsetParent !== null;
        const rect = btn.getBoundingClientRect();
        if (text && visible) {
          buttonInfo.push({
            text: text,
            tagName: btn.tagName,
            className: btn.className,
            visible: visible,
            clickable: clickable,
            width: rect.width,
            height: rect.height,
            x: rect.left,
            y: rect.top
          });
        }
      }
      return buttonInfo;
    });
    
    console.log('🔐 Available clickable elements:', availableButtons.filter(b => 
      b.text.toLowerCase().includes('instagram') || 
      b.text.toLowerCase().includes('continue') ||
      b.text.toLowerCase().includes('log in') ||
      b.text.toLowerCase().includes('login')
    ));

    // Also log all buttons for debugging
    console.log('🔐 All available buttons for debugging:', availableButtons.slice(0, 20));
    
    // Go directly to username login - skip Instagram SSO entirely
    console.log('🔐 Going directly to username login...');

    const initialUrl = page.url();
    const usernameClicked = await tryClickByText(page, [
      'Log in with username instead',
      'Log in with username',
      'Use username',
      'username',
      'Log in'
    ]);

    if (usernameClicked) {
      console.log('🔐 ✅ Clicked username login option, checking for URL change...');
      await sleep(3000);
      const newUrl = page.url();
      if (newUrl !== initialUrl) {
        console.log('🔐 ✅ URL changed from', initialUrl, 'to', newUrl, '- login option worked!');
      } else {
        console.log('🔐 ⚠️ URL did not change - trying direct navigation to login page...');

        // Try to navigate directly to the login URL
        try {
          console.log('🔐 Trying direct navigation to login page...');
          await page.goto('https://www.threads.com/login?show_choice_screen=false', {
            waitUntil: 'networkidle2',
            timeout: 30000
          });
          console.log('🔐 ✅ Successfully navigated to login page:', page.url());
        } catch (navError) {
          console.log('🔐 ❌ Direct navigation failed:', navError.message);
        }
      }
    } else {
      console.log('🔐 ❌ Could not find username login option. Trying direct navigation...');

      // Try direct navigation as fallback
      try {
        console.log('🔐 Trying direct navigation to login page as fallback...');
        await page.goto('https://www.threads.com/login?show_choice_screen=false', {
          waitUntil: 'networkidle2',
          timeout: 30000
        });
        console.log('🔐 ✅ Successfully navigated to login page via fallback:', page.url());
      } catch (navError) {
        console.log('🔐 ❌ Direct navigation fallback failed:', navError.message);

        // If all else fails, provide detailed debugging info
        console.log('🔐 ❌ Could not find any login option. Full page analysis:');

        // Get full page HTML for debugging
        const pageContent = await page.evaluate(() => {
              return {
            title: document.title,
            url: window.location.href,
            bodyText: document.body ? document.body.textContent.substring(0, 1000) : 'No body',
            allElements: Array.from(document.querySelectorAll('*')).filter(el =>
              el.textContent && el.textContent.trim().length > 0
            ).slice(0, 50).map(el => ({
              tag: el.tagName,
              text: el.textContent.trim().substring(0, 100),
              visible: el.offsetParent !== null
            }))
          };
        });

        console.log('🔐 Page info:', {
          title: pageContent.title,
          url: pageContent.url,
          bodyText: pageContent.bodyText
        });

        console.log('🔐 First 50 elements with text:', pageContent.allElements);

        throw new Error('Could not find any login option. Page analysis logged above.');
      }
    }

    console.log('🔐 Clicked login option, waiting for form...');
    await sleep(3000);
    
    console.log('🔐 After login click, current URL:', page.url());
    
    // Take a screenshot after clicking the login option
    try {
      await page.screenshot({ path: 'debug-after-login-click.png', fullPage: true });
      console.log('🔐 📸 Screenshot taken: debug-after-login-click.png');
    } catch (screenshotError) {
      console.log('🔐 Screenshot failed:', screenshotError.message);
    }
    
    // Check if we have username/password fields now - try multiple selectors
    const hasLoginForm = await page.evaluate(() => {
      // Try different possible field selectors for Threads login form
      const usernameSelectors = [
        'input[name="username"]',
        'input[name="email"]',
        'input[name="identifier"]',
        'input[placeholder*="username"]',
        'input[placeholder*="email"]',
        'input[placeholder*="Username"]',
        'input[placeholder*="Email"]',
        'input[type="text"]',
        'input[type="email"]'
      ];

      const passwordSelectors = [
        'input[name="password"]',
        'input[name="pass"]',
        'input[placeholder*="password"]',
        'input[placeholder*="Password"]',
        'input[type="password"]'
      ];

      let usernameField = null;
      let passwordField = null;

      // Find username field
      for (const selector of usernameSelectors) {
        usernameField = document.querySelector(selector);
        if (usernameField) {
          console.log('🔐 Username field found with selector:', selector);
          break;
        }
      }

      // Find password field
      for (const selector of passwordSelectors) {
        passwordField = document.querySelector(selector);
        if (passwordField) {
          console.log('🔐 Password field found with selector:', selector);
          break;
        }
      }

      console.log('🔐 Username field found:', !!usernameField);
      console.log('🔐 Password field found:', !!passwordField);

      return !!(usernameField && passwordField);
    });
    
    if (!hasLoginForm) {
      // If we can't find the form, let's take a screenshot and provide more info
      try {
        await page.screenshot({ path: 'debug-no-form-found.png', fullPage: true });
        console.log('🔐 📸 Screenshot taken: debug-no-form-found.png');
      } catch (screenshotError) {
        console.log('🔐 Screenshot failed:', screenshotError.message);
      }

      // Get more detailed page info
      const pageInfo = await page.evaluate(() => {
        return {
          title: document.title,
          url: window.location.href,
          bodyText: document.body ? document.body.textContent.substring(0, 500) : 'No body',
          inputFields: Array.from(document.querySelectorAll('input')).map(input => ({
            name: input.name,
            type: input.type,
            placeholder: input.placeholder,
            id: input.id,
            className: input.className,
            value: input.value
          })),
          allButtons: Array.from(document.querySelectorAll('button, a, input[type="submit"]')).map(btn => ({
            tagName: btn.tagName,
            text: (btn.textContent || btn.value || '').trim(),
            type: btn.type || btn.getAttribute('type'),
            name: btn.name,
            className: btn.className,
            visible: btn.offsetParent !== null
          })),
          allLinks: Array.from(document.querySelectorAll('a')).map(link => ({
            text: link.textContent.trim(),
            href: link.href,
            visible: link.offsetParent !== null
          }))
        };
      });

      console.log('🔐 === DETAILED PAGE ANALYSIS ===');
      console.log('🔐 Title:', pageInfo.title);
      console.log('🔐 URL:', pageInfo.url);
      console.log('🔐 Body Text (first 500 chars):', pageInfo.bodyText);
      console.log('🔐 All Input Fields:', pageInfo.inputFields);
      console.log('🔐 All Buttons:', pageInfo.allButtons);
      console.log('🔐 All Links:', pageInfo.allLinks);

      throw new Error('Could not find login form after clicking login options. See detailed page analysis above.');
    }
    
    console.log('🔐 Login form is visible, proceeding with credentials...');

    // Check if we need to navigate to Instagram or if we're already on a login form
    console.log('🔐 Current URL after navigation:', page.url());
    
    if (!/instagram\.com/i.test(page.url()) && !page.url().includes('login')) {
      // Try to follow any "Continue with Instagram" link on intermediate screens
      const continueClicked = await tryClickByText(page, ['Instagram', 'Continue']);
      if (continueClicked) {
        await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 });
      }
    }

    // 5) Fill credentials using flexible field detection
    console.log('🔐 Looking for username field...');

    // Try multiple selectors for username field
    const usernameSelectors = [
      'input[name="username"]',
      'input[name="email"]',
      'input[name="identifier"]',
      'input[placeholder*="username"]',
      'input[placeholder*="email"]',
      'input[placeholder*="Username"]',
      'input[placeholder*="Email"]',
      'input[type="text"]',
      'input[type="email"]'
    ];

    let usernameSelector = null;
    for (const selector of usernameSelectors) {
      try {
        await page.waitForSelector(selector, { timeout: 5000 });
        usernameSelector = selector;
        console.log('🔐 Found username field with selector:', selector);
        break;
      } catch (error) {
        // Continue to next selector
      }
    }

    if (!usernameSelector) {
      throw new Error('Could not find username field with any selector');
    }

    console.log('🔐 Typing username...');
    await page.type(usernameSelector, username, { delay: 20 });

    console.log('🔐 Looking for password field...');

    // Try multiple selectors for password field
    const passwordSelectors = [
      'input[name="password"]',
      'input[name="pass"]',
      'input[placeholder*="password"]',
      'input[placeholder*="Password"]',
      'input[type="password"]'
    ];

    let passwordSelector = null;
    for (const selector of passwordSelectors) {
      try {
        await page.waitForSelector(selector, { timeout: 5000 });
        passwordSelector = selector;
        console.log('🔐 Found password field with selector:', selector);
        break;
      } catch (error) {
        // Continue to next selector
      }
    }

    if (!passwordSelector) {
      throw new Error('Could not find password field with any selector');
    }

    console.log('🔐 Typing password...');
    await page.type(passwordSelector, password, { delay: 20 });

    // Method 4: Try pressing Enter key after typing password
    console.log('🔐 Pressing Enter key to submit form...');
    await page.keyboard.press('Enter');
    console.log('🔐 ✅ Enter key pressed');

    await sleep(2000);

    // Check if Enter key worked
    const afterEnterState = await page.evaluate(() => {
      const stillHasPasswordField = !!document.querySelector('input[type="password"]');
      const currentUrl = window.location.href;
      console.log('🔐 After Enter key - URL:', currentUrl);
      console.log('🔐 After Enter key - Password field still present:', stillHasPasswordField);
      return { stillHasPasswordField, currentUrl };
    });

    if (afterEnterState.stillHasPasswordField) {
      console.log('🔐 ⚠️ Password field still present after Enter key - trying alternative submission methods...');

      // Submit - try multiple approaches
    console.log('🔐 Attempting to submit login form...');

    // Method 1: Try submit button
    const loginSubmit = await page.$('button[type="submit"]');
    if (loginSubmit) {
      console.log('🔐 Found submit button, clicking...');
      await loginSubmit.click();
      console.log('🔐 ✅ Clicked submit button');
    } else {
      // Method 2: Try to find login button by text
      console.log('🔐 No submit button found, trying text-based click...');
      const submitClicked = await tryClickByText(page, ['Log in', 'Log In', 'Login', 'Sign in', 'Submit']);
      if (submitClicked) {
        console.log('🔐 ✅ Clicked login button by text');
      } else {
        // Method 3: Try form submission
        console.log('🔐 No button found, trying form submission...');
        try {
          await page.evaluate(() => {
            const forms = document.querySelectorAll('form');
            for (const form of forms) {
              if (form.querySelector('input[type="password"]')) {
                console.log('🔐 Found form with password field, submitting...');
                form.submit();
                return true;
              }
            }
            return false;
          });
          console.log('🔐 ✅ Submitted form programmatically');
        } catch (formError) {
          console.log('🔐 ❌ Form submission failed:', formError.message);
          throw new Error('Could not submit login form using any method.');
        }
      }
    }

    // Wait a bit for submission to process
    console.log('🔐 Waiting for form submission to process...');
    await sleep(2000);

    // Check if form submission had any effect
    const postSubmitState = await page.evaluate(() => {
      const stillHasPasswordField = !!document.querySelector('input[type="password"]');
      const hasAnyAlerts = document.querySelectorAll('[role="alert"], .error, .alert-danger').length > 0;
      const currentUrl = window.location.href;
      const pageTitle = document.title;

      console.log('🔐 Post-submit analysis:');
      console.log('🔐 - Password field still present:', stillHasPasswordField);
      console.log('🔐 - Has alerts/errors:', hasAnyAlerts);
      console.log('🔐 - Current URL:', currentUrl);
      console.log('🔐 - Page title:', pageTitle);

      return {
        stillHasPasswordField,
        hasAnyAlerts,
        currentUrl,
        pageTitle
      };
    });

    if (postSubmitState.stillHasPasswordField) {
      console.log('🔐 ⚠️ Password field still present after submission - form may not have submitted correctly');
    }

    if (postSubmitState.hasAnyAlerts) {
      console.log('🔐 ⚠️ Alerts/errors detected after submission');
    }

    // Take a screenshot after form submission
    try {
      await page.screenshot({ path: 'debug-after-form-submit.png', fullPage: true });
      console.log('🔐 📸 Screenshot taken: debug-after-form-submit.png');
    } catch (screenshotError) {
      console.log('🔐 Screenshot failed:', screenshotError.message);
    }

    // 6) Wait for post-login navigation
    await sleep(1500);

    // 7) Wait for potential navigation after login (may not happen)
    try {
      await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 10000 });
      console.log('🔐 Navigation detected after login');
    } catch (error) {
      console.log('🔐 No navigation after login - checking current state...');
    }
    
    console.log('🔐 After login submit, current URL:', page.url());
    
    // Handle post-login flow (may include save login info, OAuth consent, etc.)
    await sleep(1000);
    
    // Handle "Save login info" / one-tap (no :contains selectors)
    await tryClickByText(page, ['Not now', "Don't save", 'Skip', 'Later']);
    
    // Handle OAuth consent
    await tryClickByText(page, ['Allow', 'Continue', 'Continue as', 'Yes, continue']);
    
    // Ensure we end up on Threads home
    if (!/threads\.(net|com)/i.test(page.url())) {
      console.log('🔐 Not on Threads, navigating to home...');
      await page.goto('https://www.threads.net/', { waitUntil: 'networkidle2' });
      await sleep(1000);
    }

    // Final verification - be more flexible about what constitutes success
    const verificationResult = await page.evaluate(() => {
      console.log('🔐 Final verification - checking login success...');

      // Check 1: Are we on Threads domain (not login page)?
      const isOnThreadsDomain = window.location.hostname.includes('threads.net');
      const isNotOnLoginPage = !window.location.pathname.includes('/login');
      console.log('🔐 On Threads domain:', isOnThreadsDomain, 'Not on login page:', isNotOnLoginPage);

      // Check 2: Look for various success indicators
      const navSelectors = [
        '[aria-label="Home"]',
        '[aria-label="Search"]',
        '[aria-label="Activity"]',
        '[aria-label="Profile"]',
        '[data-testid="nav-home"]',
        '[data-testid="nav-search"]',
        '[data-testid="nav-activity"]',
        '[data-testid="nav-profile"]',
        'a[href="/"]', // Home link
        'a[href*="/search"]' // Search link
      ];

      let navElementsFound = 0;
      for (const selector of navSelectors) {
        const element = document.querySelector(selector);
        if (element) {
          console.log('🔐 Found nav element:', selector);
          navElementsFound++;
        }
      }

      // Check 3: Look for error messages that might indicate login failure
      const errorSelectors = [
        '[role="alert"]',
        '.error',
        '.alert-danger',
        'div[style*="red"]',
        'span[style*="red"]',
        'p[style*="red"]'
      ];

      let errorMessages = [];
      for (const selector of errorSelectors) {
        const elements = document.querySelectorAll(selector);
        elements.forEach(element => {
          const text = element.textContent?.trim();
          if (text && text.length > 0) {
            errorMessages.push(text);
          }
        });
      }

      // Check 4: Look for login form still present (indicates login didn't work)
      const loginFormPresent = !!document.querySelector('input[type="password"]');

      console.log('🔐 Nav elements found:', navElementsFound);
      console.log('🔐 Error messages found:', errorMessages.length);
      console.log('🔐 Login form still present:', loginFormPresent);
      console.log('🔐 Current URL:', window.location.href);

      return {
        navElementsFound,
        errorMessages,
        loginFormPresent,
        isOnThreadsDomain,
        isNotOnLoginPage,
        currentUrl: window.location.href
      };
    });

    // More flexible success criteria
    const hasNavElements = verificationResult.navElementsFound > 0;
    const noErrors = verificationResult.errorMessages.length === 0;
    const noLoginForm = !verificationResult.loginFormPresent;
    const isOnCorrectDomain = verificationResult.isOnThreadsDomain;
    const notOnLoginPage = verificationResult.isNotOnLoginPage;

    console.log('🔐 Verification results:');
    console.log('🔐 - Has nav elements:', hasNavElements);
    console.log('🔐 - No errors:', noErrors);
    console.log('🔐 - No login form:', noLoginForm);
    console.log('🔐 - On correct domain:', isOnCorrectDomain);
    console.log('🔐 - Not on login page:', notOnLoginPage);

    // Consider login successful if we meet most criteria
    const loginSuccessful = (hasNavElements || (noLoginForm && isOnCorrectDomain && notOnLoginPage)) && noErrors;

    if (!loginSuccessful) {
      console.log('🔐 ❌ Login verification failed');
      console.log('🔐 Error messages:', verificationResult.errorMessages);
      console.log('🔐 Current URL:', verificationResult.currentUrl);

      // Take a final screenshot for debugging
      try {
        await page.screenshot({ path: 'debug-login-verification-failed.png', fullPage: true });
        console.log('🔐 📸 Screenshot taken: debug-login-verification-failed.png');
      } catch (screenshotError) {
        console.log('🔐 Screenshot failed:', screenshotError.message);
      }

      throw new Error(`Threads login verification failed. Nav elements: ${verificationResult.navElementsFound}, Errors: ${verificationResult.errorMessages.length}, Login form present: ${verificationResult.loginFormPresent}`);
    } else {
      console.log('🔐 ✅ Login verification successful!');
      console.log('🔐 Final URL:', verificationResult.currentUrl);

      console.log('✅ Threads login successful');
      return true;
    }
  } catch (error) {
    console.error('Threads login error:', error);
    throw new Error(`Threads login error: ${error.message}`);
  }
}

async function threadsLike(page, threadUrl) {
  console.log(`❤️ Attempting to like Threads post: ${threadUrl}`);
  await page.goto(threadUrl, { waitUntil: 'networkidle2' });
  await sleep(1000); // Wait for page to fully load
  
  // Look for like button using multiple strategies
  const likeSelectors = [
    '[aria-label="Like"]',
    '[data-testid="like-button"]',
    'button[aria-label*="like"]',
    '[role="button"][aria-label*="Like"]'
  ];
  
  let liked = false;
  for (const selector of likeSelectors) {
    try {
      const likeButton = await page.$(selector);
      if (likeButton) {
        await likeButton.click();
        console.log(`✅ Threads post liked using selector: ${selector}`);
        liked = true;
        break;
      }
    } catch (error) {
      console.log(`Failed to click like with selector ${selector}: ${error.message}`);
    }
  }
  
  if (!liked) {
    // Try text-based approach as fallback
    const textLiked = await tryClickByText(page, ['Like', 'Heart']);
    if (textLiked) {
      console.log('✅ Threads post liked using text-based approach');
      liked = true;
    }
  }
  
  if (!liked) {
    throw new Error('Could not find or click like button on Threads post');
  }
  
  await sleep(1000); // Wait for like action to complete
  return { success: true };
}

async function threadsComment(page, threadUrl, comment) {
  console.log(`💬 Attempting to comment on Threads post: ${threadUrl}`);
  console.log(`Comment text: "${comment}"`);
  
  await page.goto(threadUrl, { waitUntil: 'networkidle2' });
  await sleep(1000);
  
  // Look for reply/comment button
  const replySelectors = [
    '[aria-label="Reply"]',
    '[data-testid="reply-button"]',
    'button[aria-label*="reply"]',
    '[role="button"][aria-label*="Reply"]'
  ];
  
  let replyClicked = false;
  for (const selector of replySelectors) {
    try {
      const replyButton = await page.$(selector);
      if (replyButton) {
        await replyButton.click();
        console.log(`✅ Reply button clicked using selector: ${selector}`);
        replyClicked = true;
        break;
      }
    } catch (error) {
      console.log(`Failed to click reply with selector ${selector}: ${error.message}`);
    }
  }
  
  if (!replyClicked) {
    // Try text-based approach
    const textReplyClicked = await tryClickByText(page, ['Reply', 'Comment']);
    if (textReplyClicked) {
      console.log('✅ Reply button clicked using text-based approach');
      replyClicked = true;
    }
  }
  
  if (!replyClicked) {
    throw new Error('Could not find or click reply button on Threads post');
  }
  
  await sleep(2000); // Wait for comment box to appear
  
  // Look for comment text area
  const textareaSelectors = [
    'textarea[placeholder*="reply"]',
    'textarea[placeholder*="comment"]',
    'textarea[aria-label*="reply"]',
    'textarea[data-testid*="comment"]',
    'div[contenteditable="true"]',
    'textarea'
  ];
  
  let commented = false;
  for (const selector of textareaSelectors) {
    try {
      const textarea = await page.$(selector);
      if (textarea) {
        await textarea.click();
        await textarea.type(comment, { delay: 50 });
        console.log(`✅ Comment typed using selector: ${selector}`);
        
        // Look for submit button
        const submitSelectors = [
          'button[type="submit"]',
          '[data-testid="post-button"]',
          'button[aria-label*="post"]',
          'button[aria-label*="reply"]'
        ];
        
        let submitted = false;
        for (const submitSelector of submitSelectors) {
          try {
            const submitButton = await page.$(submitSelector);
            if (submitButton) {
              await submitButton.click();
              console.log(`✅ Comment submitted using selector: ${submitSelector}`);
              submitted = true;
              break;
            }
          } catch (error) {
            console.log(`Failed to submit with selector ${submitSelector}: ${error.message}`);
          }
        }
        
        if (!submitted) {
          // Try keyboard shortcut
          await page.keyboard.down('Meta');
          await page.keyboard.press('Enter');
          await page.keyboard.up('Meta');
          console.log('✅ Comment submitted using Cmd+Enter');
        }
        
        commented = true;
        break;
      }
    } catch (error) {
      console.log(`Failed to use textarea selector ${selector}: ${error.message}`);
    }
  }
  
  if (!commented) {
    throw new Error('Could not find comment textarea on Threads post');
  }
  
  await sleep(2000); // Wait for comment to post
  console.log('✅ Threads comment posted successfully');
  return { success: true };
}

async function discoverThreadsPosts(page, searchCriteria, maxPosts = 10) {
  console.log(`🧵 Starting Threads post discovery for: ${JSON.stringify(searchCriteria)}`);
  
  const { hashtag, keywords } = searchCriteria;
  let searchQuery = hashtag || keywords;
  
  if (!searchQuery) {
    throw new Error('Either hashtag or keywords must be provided for Threads search');
  }
  
  // Use the correct Threads search URL format with recent sorting
  const searchUrl = `https://www.threads.net/search?q=${encodeURIComponent(searchQuery)}&serp_type=recent`;
  console.log(`🔍 Navigating to Threads search (recent): ${searchUrl}`);
  
  await page.goto(searchUrl, { waitUntil: 'networkidle2' });
  await sleep(3000); // Wait for search results to load
  
  // Extract post URLs from search results
  const postUrls = await page.evaluate(() => {
    const links = document.querySelectorAll('a[href*="/post/"]');
    const urls = [];
    
    links.forEach(link => {
      const href = link.getAttribute('href');
      if (href && href.includes('/post/')) {
        const fullUrl = href.startsWith('http') ? href : `https://www.threads.net${href}`;
        urls.push(fullUrl);
      }
    });
    
    return [...new Set(urls)]; // Remove duplicates
  });
  
  console.log(`🧵 Found ${postUrls.length} potential Threads posts`);
  
  // Limit to requested number of posts
  const limitedPosts = postUrls.slice(0, maxPosts);
  console.log(`🧵 Returning ${limitedPosts.length} posts (limited to ${maxPosts})`);
  
  return limitedPosts;
}

// Export all functions
export {
  ensureThreadsLoggedIn,
  threadsLike,
  threadsComment,
  discoverThreadsPosts
};
